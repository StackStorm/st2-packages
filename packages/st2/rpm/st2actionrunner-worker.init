#!/bin/sh
#
### BEGIN INIT INFO
# Provides: st2actionrunner
# Required-Start: $local_fs $network $named $remote_fs $syslog
# Required-Stop: $local_fs $network $named $remote_fs $syslog
# Short-Description: st2actionrunner component
# Description: StackStorm st2actionrunner-worker
### END INIT INFO

# st2actionrunner     This shell script takes care of starting and stopping
#                     st2actionrunner worker daemon.
# chkconfig: - 85 15
# description: StackStorm st2actionrunner-worker
# processname: st2actionrunner

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Source our sysv functions
. /opt/stackstorm/st2/share/sysvinit/functions

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="st2actionrunner-worker"
NAME=st2actionrunner
DAEMON=/opt/stackstorm/st2/bin/$NAME
DAEMON_ARGS="--config-file /etc/st2/st2.conf"
PIDFILE=/var/run/$NAME-${WORKERID}.pid
RUNAS_USER="root"
RUNAS_GROUP="st2packs"
UMASK=002

lockfile=/var/lock/subsys/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 5

# Read configuration variable file if it is present
[ -r /etc/sysconfig/$NAME ] && . /etc/sysconfig/$NAME

# Check if invoked worker service directly
if [ -z $WORKERID ]; then
  failure "Can't start this service directly, use /etc/init.d/st2actionrunner instead"
  exit 3
fi

# Set required umask
umask $UMASK


start() {
    echo -n $"Starting $NAME: "
    daemon --background --check=${NAME} --user=${RUNAS_USER} --group=${RUNAS_GROUP} \
        $DAEMON $DAEMON_ARGS
    save_chkprocesspid --scriptname=${NAME} --pidfile=${PIDFILE} ${DAEMON}
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile || return $retval
}

stop() {
    echo -n $"Stopping $NAME: "
    killproc -p $PIDFILE $DAEMON
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile || return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $PIDFILE
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
