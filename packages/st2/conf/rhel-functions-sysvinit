# -*-Shell-script-*-

# Redhat daemon function with process group change ability
# preserving supplementary groups.
#
daemon() {
        # Test syntax.
        local gotbase= force= nicelevel corelimit
        local pid base= user= nice= bg= pid_file=
        local cgroup=
        local group= group_opts= suppgroup_opts=
        local background= daemoncmd=
        nicelevel=0
        while [ "$1" != "${1##[-+]}" ]; do
          case $1 in
            '')    echo $"$0: Usage: daemon [+/-nicelevel] {program}"
                   return 1;;
            --check)
                   base=$2
                   gotbase="yes"
                   shift 2
                   ;;
            --check=?*)
                   base=${1#--check=}
                   gotbase="yes"
                   shift
                   ;;
            --user)
                   user=$2
                   shift 2
                   ;;
            --user=?*)
                   user=${1#--user=}
                   shift
                   ;;
            --group)
                   group=$2
                   shift 2
                   ;;
            --group=?*)
                   group=${1#--group=}
                   shift
                   ;;
            --pidfile)
                   pid_file=$2
                   shift 2
                   ;;
            --pidfile=?*)
                   pid_file=${1#--pidfile=}
                   shift
                   ;;
            --force)
                   force="force"
                   shift
                   ;;
            --background)
                   background="yes"
                   shift
                   ;;
            [-+][0-9]*)
                   nice="nice -n $1"
                   shift
                   ;;
            *)     echo $"$0: Usage: daemon [+/-nicelevel] {program}"
                   return 1;;
          esac
        done

        # Save basename.
        [ -z "$gotbase" ] && base=${1##*/}

        # See if it's already running. Look *only* at the pid file.
        __pids_var_run "$base" "$pid_file"

        [ -n "$pid" -a -z "$force" ] && return

        # make sure it doesn't core dump anywhere unless requested
        corelimit="ulimit -S -c ${DAEMON_COREFILE_LIMIT:-0}"

        # if they set NICELEVEL in /etc/sysconfig/foo, honor it
        [ -n "${NICELEVEL:-}" ] && nice="nice -n $NICELEVEL"

        # if they set CGROUP_DAEMON in /etc/sysconfig/foo, honor it
        if [ -n "${CGROUP_DAEMON}" ]; then
                if [ ! -x /bin/cgexec ]; then
                        echo -n "Cgroups not installed"; warning
                        echo
                else
                        cgroup="/bin/cgexec";
                        for i in $CGROUP_DAEMON; do
                                cgroup="$cgroup -g $i";
                        done
                fi
        fi

        # Echo daemon
        [ "${BOOTUP:-}" = "verbose" -a -z "${LSB:-}" ] && echo -n " $base"

        # Group and supplementary group list options (-G grp1 -G grp2).
        # If group is not overrided runuser will pick up supplementary groups,
        # so no need to set them specifically.
        if [ ! -z "$group" ]; then
          group_opts="-g $group"
          suppgroup_opts=$(id -nG $user | sed 's/^\| / -G /g')
        fi

        # Wrap daemon command call with nohup, if background options is given.
        [ -z "$background" ] && daemoncmd="$*" ||
            daemoncmd="nohup </dev/null 1>/dev/null 2>&1 $* &"

        # And start it up.
        : ${user:=root}
        $cgroup $nice runuser $group_opts $suppgroup_opts $user \
            -s /bin/bash -c "$corelimit >/dev/null 2>&1 ; $daemoncmd"

        # Write completion message only when starting a real daemon.
        if [ -z "$background" ]; then
          [ "$?" -eq 0 ] && success $"$base startup" || failure $"$base startup"
        fi
}


# Write pid of a starting daemon into the pidfile.
# By default wait for the pid up to 3 seconds.
pgrep_waitforpid() {
  local pid= pid_file= base= trailer=
  local pgrep_opts="-n" timeout="3.0"

  while [ "$1" != "${1##--}" ]; do
    case $1 in
      '')    echo $"$0: Usage: pgrep_waitforpid {program}"
             return 1;;
      --masterpid)
          pgrep_opts="-o"
          shift
          ;;
      --pidfile)
          pid_file=$2
          shift 2
          ;;
      --pidfile=?*)
          pid_file=${1#--pidfile=}
          shift
          ;;
      --scriptname)
          base=$2
          shift 2
          ;;
      --scriptname=?*)
          base=${1#--scriptname=}
          shift
          ;;
      --timeout)
          timeout=$2
          shift 2
          ;;
      --timeout=?*)
          timeout=${1#--timeout=}
          shift
          ;;

      *)  echo $"$0: Usage: pgrep_waitforpid {program}"
          return 1;;
    esac
  done

  # Locate pid of a started daemon (oldest pid in case if masterpid is given).
  [ -z "$scriptname"] || trailer=".*${scriptname}"

  # Check for pid in a cycle until found or timed-out.
  #
  for s in $(seq 0.0 0.1 $timeout); do
    pid=$(pgrep $pgrep_opts -f "$1${trailer}")
    if [ ! -z "$pid" ]; then
      # In case of false-positve during forking, double check that pid exists.
      sleep 0.1; checkpid $pid && break || continue
    else
      sleep 0.1
    fi
  done

  # Define pid_file path.
  [ -z "$base" ] && base=${1##*/}
  pid_file=${pid_file:-/var/run/$base.pid}

  if checkpid $pid; then
    echo $pid > $pid_file
    success $"$base startup"
  else
    failure $"$base startup"
  fi
}

# Waits for a process startup and when it writes the pidfile.
waitforpid() {
  local pid= pid_file= base= timeout="3.0"

  while [ "$1" != "${1##--}" ]; do
    case $1 in
      '')    echo $"$0: Usage: waitforpid [options]"
             return 1;;
      --pidfile)
          pid_file=$2
          shift 2
          ;;
      --pidfile=?*)
          pid_file=${1#--pidfile=}
          shift
          ;;
      --timeout)
          timeout=$2
          shift 2
          ;;
      --timeout=?*)
          timeout=${1#--timeout=}
          shift
          ;;

      *)  echo $"$0: Usage: waitforpid [options]"
          return 1;;
    esac
  done

  # Define pid_file path.
  [ -z "$base" ] && base=${1##*/}
  pid_file=${pid_file:-/var/run/$base.pid}

  # Check for pid in a cycle until found or timed-out.
  #
  for s in $(seq 0.0 0.1 $timeout); do
    if [ -f "$pid_file" ]; then
      # In case process dies or anything, we keep iterating
      pid=$(cat $pid_file)
      sleep 0.1; checkpid $pid && break || continue
    else
      sleep 0.1
    fi
  done

  checkpid $pid && success $"$base startup" || failure $"$base startup"
}
