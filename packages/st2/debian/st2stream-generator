#!/usr/bin/env python3
import configparser
import logging
import time
import sys

ST2SVC = "st2stream"
DEFAULT_IP = "127.0.0.1"
DEFAULT_PORT = "9101"
ST2CFG = "/etc/st2/st2.conf"

# Systemd passes 3 paths to a generator, normal_dir, early_dir, late_dir.
default_paths = ["/tmp", "/tmp", "/tmp"]
for i, p in enumerate(sys.argv[1:]):
    default_paths[i] = p
EARLY_DIR, NORMAL_DIR, LATE_DIR = default_paths

LOG_TO_DISK = True
LOG_KW = {
    "level": logging.DEBUG,
    "format": "%(asctime)s - %(levelname)s - %(message)s",
}
if LOG_TO_DISK:
    LOG_KW["filename"] = f"{NORMAL_DIR}/{ST2SVC}_generator.log"

logging.basicConfig(**LOG_KW)
LOG = logging.getLogger()

LOG.debug(
    f"Systemd directories: Early='{EARLY_DIR}' Normal='{NORMAL_DIR}' Late='{LATE_DIR}'"
)

config = configparser.ConfigParser(strict=False)
config.read(ST2CFG)

section = ST2SVC[3:]
bind_address = config[section].get("host", DEFAULT_IP)
bind_port = config[section].get("port", DEFAULT_PORT)

socket_contents = f"""[Unit]
# Generated by {sys.argv[0]} at {time.asctime(time.localtime())}
Description=StackStorm {ST2SVC} Socket.
PartOf={ST2SVC}.service
SourcePath={ST2CFG}

[Socket]
ListenStream={bind_address}:{bind_port}

[Install]
WantedBy=sockets.target
"""

with open(f"{NORMAL_DIR}/{ST2SVC}.socket", "w") as f:
    f.write(socket_contents)

LOG.info(f"{ST2SVC} socket generated.")

unit_contents = f"""[Unit]
# Generated by {sys.argv[0]} at {time.asctime(time.localtime())}
Description=StackStorm service {ST2SVC}
After=network.target {ST2SVC}.socket
Requires={ST2SVC}.socket

[Service]
Type=simple
User=st2
Group=st2
ExecStart=/opt/stackstorm/st2/bin/gunicorn {ST2SVC}.wsgi:application -k eventlet -b {bind_address}:{bind_port} --workers 1 --threads 1 --graceful-timeout 10 --timeout 30 --log-config /etc/st2/logging.api.gunicorn.conf --error-logfile /var/log/st2/{ST2SVC}.log
TimeoutSec=60
PrivateTmp=true
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
"""

with open(f"{NORMAL_DIR}/{ST2SVC}.service", "w") as f:
    f.write(unit_contents)

LOG.info(f"{ST2SVC} unit generated")
