# Setup in CircleCI account the following ENV variables:
# IS_PRODUCTION (default: 0)
# IS_ENTERPRISE (default: 0)
# PACKAGECLOUD_ORGANIZATION (default: stackstorm)
# PACKAGECLOUD_TOKEN

version: 2
jobs:
  # Build & Test st2 & st2mistral packages
  packages:
    parallelism: 6
    # 4CPUs & 8GB RAM CircleCI machine
    # sadly, it doesn't work with 'setup_remote_docker'
    resource_class: large
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/python:2.7
    working_directory: ~/st2-packages
    environment:
      DISTROS: "trusty xenial bionic el6 el7 el8"
      BASH_ENV: ~/.buildenv
      # These should be set to an empty string, so that st2cd prep tasks are able to replace these
      # with real gitrevs during releases. Note that they are commented out, so that they do not interfere
      # with build parameters. st2cd prep tasks will uncomment these on a branch, and replace with proper
      # gitrefs.
      # ST2_GITREV: ""
      # ST2MISTRAL_GITREV: ""
    steps:
      - checkout
      - setup_remote_docker:
          reusable: true    # default - false
          exclusive: true   # default - true
          # Temporary workaround for Circle CI issue
          # https://discuss.circleci.com/t/setup-remote-docker-connection-failures/26434
          version: 18.05.0-ce 
      - run:
          name: Ensure installation scripts are synced with their templates
          command: make .generated-files-check
      - run:
          name: Docker version
          command: |
            set -x
            docker --version
            docker-compose --version
      - run:
          name: Initialize packages Build Environment
          command: |
            set -x
            .circle/buildenv_st2.sh
            .circle/buildenv_mistral.sh
      # Verify that Docker environment is properly cleaned up and there is nothing left from the previous build
      # See issue: https://discuss.circleci.com/t/no-space-left-on-device-while-creating-mongo/11532/13
      - run:
          name: Pre Docker cleanup
          command: |
            set -x
            # Clean-up running containers
            .circle/docker-compose2.sh clean
            # Remove st2-packages-vol container
            docker rm -v --force st2-packages-vol || true
            # Clean-up any created volumes
            docker volume prune --force
      - run:
          # Workaround for CircleCI docker-compose limtation where volumes don't work
          # See detailed explanation: https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Copy st2-packages files to build containers
          command: |
            # creating dummy container which will hold a volume with data files
            docker create -v /root/st2-packages -v /root/build -v /var/log/st2 -v /root/.cache/pip -v /tmp/wheelhouse --name st2-packages-vol alpine:3.4 /bin/true
            # copy st2-packages data files into this volume
            docker cp ~/st2-packages st2-packages-vol:/root
      - run:
          name: Pull dependent Docker Images
          command: .circle/docker-compose2.sh pull ${DISTRO}
      - run:
          name: Build the ${DISTRO} Packages
          command: |
            .circle/docker-compose2.sh build ${DISTRO}
            # Once build container finishes we can copy packages directly from it
            mkdir -p ~/st2-packages/build/${DISTRO}/log/
            docker cp st2-packages-vol:/root/build/. ~/st2-packages/build/${DISTRO}
#      # TODO: It works! (~0.5-1min speed-up) Enable CircleCI2.0 cache for pip and wheelhouse later
#      - run:
#          name: Build the ${DISTRO} Packages 2nd time (compare with pip/wheelhouse cached)
#          command: |
#            .circle/docker-compose2.sh build ${DISTRO}
#            # Once build container finishes we can copy packages directly from it
#            docker cp st2-packages-vol:/root/build /tmp/st2-packages
#          working_directory: ~/st2-packages
      - run:
          name: Test the Packages
          command: .circle/docker-compose2.sh test ${DISTRO}
      - run:
          when: always
          name: Grab the st2 logs
          command: docker cp st2-packages-vol:/var/log/st2 ~/st2-packages/build/${DISTRO}/log/st2
      - store_artifacts:
          path: ~/st2-packages/build
          destination: packages
      - persist_to_workspace:
          root: ~/st2-packages
          paths:
            - .circle/packagecloud.sh
            - build
      # Verify that Docker environment is properly cleaned up, and there is nothing left for the next build
      # See issue: https://discuss.circleci.com/t/no-space-left-on-device-while-creating-mongo/11532/13
      - run:
          name: Post Docker cleanup
          # don't cleanup resources on error since failed container might be used for SSH debug
          when: on_success
          command: |
            set -x
            # Clean-up running containers
            .circle/docker-compose2.sh clean
            # Remove st2-packages-vol container
            docker rm -v --force st2-packages-vol || true
            # Clean-up any created volumes
            docker volume prune --force

  # Deploy produced deb/rpm packages to PackageCloud staging
  deploy:
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/ruby:2.4
    working_directory: /tmp/deploy
    environment:
      - DISTROS: "trusty xenial bionic el6 el7 el8"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: List workspace files
          command: find . | sed 's|[^/]*/|  |g'
      - run:
          name: Install dependencies
          command: |
            set -x
            sudo apt-get -y install parallel jq
            gem install package_cloud
      - run:
          name: Deploy deb/rpm packages to PackageCloud
          command: "parallel -v -j0 --line-buffer .circle/packagecloud.sh deploy {} build/{} ::: ${DISTROS}"

# TODO: Return to workflows when "Auto-cancel redundant builds‚Äù feature is implemented for Workflows: https://discuss.circleci.com/t/auto-cancel-redundant-builds-not-working-for-workflow/13852
# Putting everything together
workflows:
  version: 2
  package-test-deploy:
    jobs:
      - packages
      - deploy:
          requires:
            - packages
          filters:
            branches:
              only:
                - master
                - /v[0-9]+\.[0-9]+/
                - feature/circleci

experimental:
  notify:
    branches:
      only:
        - master
        - /v[0-9]+\.[0-9]+/

notify:
  webhooks:
    - url: https://ci-webhooks.stackstorm.net/webhooks/build/events
